name: CI

on:
  workflow_dispatch:

env:
  DOTNET_VERSION: 6.0.x
  WORKDIR: ./
  TESTS_FOLDER: SimpleWorkerService.Tests

jobs:
  build-debug:
    runs-on: ubuntu-latest
    name: Build Code
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: "Restore dependencies"
      run: dotnet restore SimpleWorkerService.sln

    - name: "Build the App"
      run: dotnet build --no-restore SimpleWorkerService.sln
    
    - name: Upload the debug build artifact
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: ApplicationArtifact #.zip will be added automatically
        path: ./bin/debug/${{ env.DOTNET_VERSION }}/*.*
  
  
  check-code-formatting:
    strategy:
      matrix:
        projects: [SimpleWorkerService]
        
    runs-on: ubuntu-latest
    name: Check code formating

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dotnet-format tool
      run: dotnet tool install -g dotnet-format
    
    - name: Check Code Format
      run: dotnet format ${{ matrix.projects }}
      
  run-tests:
    name: Run Tests Against Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: "Setup .NET Core ${{ env.DOTNET_VERSION }}"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Restore dependencies"
        run: dotnet restore SimpleWorkerService.sln

      - name: "Build the App"
        run: dotnet build --no-restore SimpleWorkerService.sln

      - name: "Run Unit Tests"
        id: unittest
        run: |
          dotnet test --no-build SimpleWorkerService.Tests --logger "trx;LogFileName=TestResults.trx" --results-directory ./TestResults 
      
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          fail-on-error: false
          name: Test Report           # Name of the check run which will be created
          path: ./TestResults/TestResults.trx    # Path to test results
          reporter: dotnet-trx        # Format of test results
            
      - name: If PR Then Comment on PR
        if: failure() && github.event_name == 'pull_request'
        uses: allthatjazzleo/actions-pull-request-add-comment@master
        with:
          message: 'Unit tests failed'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
  scan-code:
    name: "Scan Image"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: "Setup .NET Core ${{ env.DOTNET_VERSION }}"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: 'csharp'
          
      - name: "Restore dependencies"
        run: dotnet restore

      - name: "Build the App"
        run: dotnet build --no-restore
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2 
