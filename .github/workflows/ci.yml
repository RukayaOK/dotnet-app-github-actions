name: CI

on:
  pull_request:
    branches:
      - main
      
  workflow_dispatch:
    inputs:
      docker-images:
        required: true
        type: string
        description: "List of maps containing: [{<dockerfile-path>:<dockerimage-name>}]"
        default: "{\"include\":[{\"path\":\"build/Dockerfile\",\"name\":\"simpleworkerservice\"}]}"
      format-severity:
        required: true
        type: choice
        default: error
        options:
        - error
        - info
        - warn
        
env:
  # for format 
  DEFAULT_FORMAT_SEVERITY: error
  
  # for build 
  SOLUTION_FILE: SimpleWorkerService.sln
  DOTNET_VERSION: 6.0.x
  
  # for test 
  TESTS_FOLDER: SimpleWorkerService.Tests
  
  # for scan - Azure/container-scan@v0 on ubuntu-latest
  DOCKLE_HOST: "unix:///var/run/docker.sock" 
  DEFAULT_DOCKER_IMAGES: "{\"include\":[{\"path\":\"build/Dockerfile\",\"name\":\"simpleworkerservice\"}]}"
  

jobs:
  
  set-default-values:
    runs-on: ubuntu-latest
    name: Set default values
    
    outputs:
        format_severity: ${{ steps.set_defaults.outputs.format_severity }}
        docker_image: ${{ steps.set_defaults.outputs.docker_image }}
        
    steps:
      - name: Set the values
        id: set_defaults
        run: |
          INPUT_DOCKER_IMAGES=${{ github.event.inputs.docker-images }}
          DOCKER_IMAGES=${INPUT_DOCKER_IMAGES:-"${{ env.DEFAULT_DOCKER_IMAGES }}"}
          echo "::set-output name=docker_image::$DOCKER_IMAGES"
          
          echo 1
          echo $INPUT_DOCKER_IMAGES
          echo 2
          echo ${{ env.DEFAULT_DOCKER_IMAGES }}
          echo 3
          echo $DOCKER_IMAGES
          echo 4
          
          INPUT_FORMAT_SEVERITY=${{ github.event.inputs.docker-images }}
          FORMAT_SEVERITY=${INPUT_FORMAT_SEVERITY:-"${{ env.DEFAULT_FORMAT_SEVERITY }}"}
          echo "::set-output name=format_severity::$FORMAT_SEVERITY"
    
  check-code-formatting:
    if: ${{ false }}
    needs:
      - set-default-values
    runs-on: ubuntu-latest
    name: Check Code Format
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ steps.pr_data.outputs.branch }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dotnet-format tool
      run: dotnet tool install -g dotnet-format
    
    - name: Check Code Format
      id: formatCheck
      run: dotnet format ${{ env.SOLUTION_FILE }} -v d --verify-no-changes --severity ${{ needs.set-default-values.outputs.format_severity }} --report format-results/format-issues.json
   
    - name: Render Pull Request Comment
      if: failure() && github.event_name == 'pull_request'
      id: pull_request_comment
      run: |
        PULL_REQUEST_COMMENT="Workflow name: ${{ github.workflow }} \n Action: ${{ github.event_name }} \n Job: ${{ github.job }} \n PR: #${{ github.event.number }} \nFormat Checker details: [Run #${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) \n Pusher: @${{ github.actor }}"
        echo "::set-output name=pull_request_comment::$PULL_REQUEST_COMMENT"
         
    - name: Comment on Pull Request
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "**Failure in Code Format Check** \n ${{ steps.pull_request_comment.outputs.pull_request_comment }}"
          })
          
  run-tests:
    if: ${{ false }} 
    name: Run Tests Against Code
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2

      - name: "Setup .NET Core ${{ env.DOTNET_VERSION }}"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Restore dependencies"
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: "Build the App"
        run: dotnet build --no-restore ${{ env.SOLUTION_FILE }}

      - name: "Run Tests"
        run: |
          dotnet test --no-build ${{ env.TESTS_FOLDER }} --logger "trx;LogFileName=TestResults.trx" --results-directory ./TestResults 
      
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: ${{ always() }}    # run this step even if previous step failed
        with:
          fail-on-error: false
          name: Test Report           # Name of the check run which will be created
          path: ./TestResults/TestResults.trx    # Path to test results
          reporter: dotnet-trx        # Format of test results
            
    
  scan-code:
    if: ${{ false }} 
    name: Scan Code
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2

      - name: "Setup .NET Core ${{ env.DOTNET_VERSION }}"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: 'csharp'
          
      - name: "Restore dependencies"
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: "Build the App"
        run: dotnet build --no-restore ${{ env.SOLUTION_FILE }}
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2  
  
  
  prepare-container-image-scan:
    name: "Prepare Container Image Scan"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: set-matrix
      run: echo "::set-output name=matrix::$input"
      env:
          input: ${{ inputs.docker-images }}
          
  scan-container-image:
    needs:
      - prepare-container-image-scan
    name: "Scan Container Image"
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare-container-image-scan.outputs.matrix)}}
    
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          docker build . -f ${{ matrix.path }} -t ${{ matrix.name }}:${{ github.sha }}
      - name: Scan image
        uses: Azure/container-scan@v0
        with:
          image-name: ${{ matrix.name }}:${{ github.sha }}
          severity-threshold: CRITICAL
          run-quality-checks: true 
