name: CI

on:
  pull_request:
    branches:
    - main
  workflow_dispatch:

env:
  DOTNET_VERSION: 6.0.x
  TESTS_FOLDER: SimpleWorkerService.Tests

jobs:
  check-code-formatting:
    runs-on: ubuntu-latest
    name: Check code formating

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dotnet-format tool
      run: dotnet tool install -g dotnet-format
    
    - name: Check Code Format
      run: dotnet format SimpleWorkerService.sln -v d
      
  run-tests:
    name: Run Tests Against Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: "Setup .NET Core ${{ env.DOTNET_VERSION }}"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Restore dependencies"
        run: dotnet restore SimpleWorkerService.sln

      - name: "Build the App"
        run: dotnet build --no-restore SimpleWorkerService.sln

      - name: "Run Tests"
        run: |
          dotnet test --no-build SimpleWorkerService.Tests --logger "trx;LogFileName=TestResults.trx" --results-directory ./TestResults 
      
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          fail-on-error: false
          name: Test Report           # Name of the check run which will be created
          path: ./TestResults/TestResults.trx    # Path to test results
          reporter: dotnet-trx        # Format of test results
            
    
  scan-code:
    name: "Scan Code"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: "Setup .NET Core ${{ env.DOTNET_VERSION }}"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: 'csharp'
          
      - name: "Restore dependencies"
        run: dotnet restore

      - name: "Build the App"
        run: dotnet build --no-restore
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
  
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

    # Checkout the Repository
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@main

    # login to Azure CLI
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: PWD 
      run: pwd
      
    - name: tree 
      run: tree 
      
    - name: Build
      run: docker build . -f build/Dockerfile
        
   # Build and push image to container registry
    - name: 'Build and push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        working-directory: build
    - run: |
        docker build . -f build/Dockerfile -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/simpleworkerservice:${{ github.sha }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/simpleworkerservice:${{ github.sha }}
            
  scan-image:
    name: "Scan Image"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerimage: [ { "path": "build/Dockerfile", "name": "simpleworkerservice" } ]
    
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          docker build . -f ${{ matrix.dockerimage.path }} -t ${{ matrix.dockerimage.name }}:${{ github.sha }}

      - name: Scan image
        uses: Azure/container-scan@v0
        with:
          image-name: ${{ matrix.dockerimage.name }}:${{ github.sha }}
          severity-threshold: CRITICAL
          run-quality-checks: true  
