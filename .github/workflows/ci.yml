name: CI

on:
  workflow_dispatch:
    inputs:
      docker-images:
        required: true
        type: string
        description: "{\"include\":[{\"path\":\"build/Dockerfile\",\"name\":\"simpleworkerservice\"},{\"path\":\"Dockerfile\",\"name\":\"simpleworkservice2\"}]}"
        default: "{\"include\":[{\"path\":\"build/Dockerfile\",\"name\":\"simpleworkerservice\"}]}"
      format-severity:
        required: true
        type: choice
        options:
        - error
        - info
        - warn
        default: error
  
  pull_request:
  
env:
  DOTNET_VERSION: 6.0.x
  TESTS_FOLDER: SimpleWorkerService.Tests
  SOLUTION_FILE: SimpleWorkerService.sln
  DOCKLE_HOST: "unix:///var/run/docker.sock" # for Azure/container-scan@v0 on ubuntu-latest

jobs:
      
  check-code-formatting:
    runs-on: ubuntu-latest
    name: Check Code Format

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ steps.pr_data.outputs.branch }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dotnet-format tool
      run: dotnet tool install -g dotnet-format
    
    - name: Check Code Format
      id: formatCheck
      run: dotnet format ${{ env.SOLUTION_FILE }} -v d --verify-no-changes --severity ${{ inputs.format-severity }} --report format-results/format-issues.json
    
    - name: If PR Then Comment on PR
      if: failure() && github.event_name == 'pull_request'
      uses: allthatjazzleo/actions-pull-request-add-comment@master
      with:
        message: 'yoyoü§ôüèª'
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
    - name: Upload format issues 
      if: always() && github.event_name == 'pull_request'
      uses: actions/upload-artifact@v1
      with:
        name: results
        path: format-results
    
    - name: Add comment to PR
      if: always() 
      env:
        URL: ${{ github.event.issue.comments_url }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl \
          -X POST \
          $URL \
          -H "Content-Type: application/json" \
          -H "Authorization: token $GITHUB_TOKEN" \
          --data '{ "body": "blah blah" }'
          
    - name: Comment on PR
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Please change PR Title!!'
          })
          
  run-tests:
    if: ${{ false }} 
    name: Run Tests Against Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: "Setup .NET Core ${{ env.DOTNET_VERSION }}"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Restore dependencies"
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: "Build the App"
        run: dotnet build --no-restore ${{ env.SOLUTION_FILE }}

      - name: "Run Tests"
        run: |
          dotnet test --no-build ${{ env.TESTS_FOLDER }} --logger "trx;LogFileName=TestResults.trx" --results-directory ./TestResults 
      
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: ${{ always() }}    # run this step even if previous step failed
        with:
          fail-on-error: false
          name: Test Report           # Name of the check run which will be created
          path: ./TestResults/TestResults.trx    # Path to test results
          reporter: dotnet-trx        # Format of test results
            
    
  scan-code:
    if: ${{ false }} 
    name: Scan Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: "Setup .NET Core ${{ env.DOTNET_VERSION }}"
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: 'csharp'
          
      - name: "Restore dependencies"
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: "Build the App"
        run: dotnet build --no-restore ${{ env.SOLUTION_FILE }}
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2  
  
  
  prepare-container-image-scan:
    if: ${{ false }} 
    name: "Prepare Container Image Scan"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: set-matrix
      run: echo "::set-output name=matrix::$input"
      env:
          input: ${{ inputs.docker-images }}
          
  scan-container-image:
    if: ${{ false }} 
    needs:
      - prepare-container-image-scan
    name: "Scan Container Image"
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare-container-image-scan.outputs.matrix)}}
    
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          docker build . -f ${{ matrix.path }} -t ${{ matrix.name }}:${{ github.sha }}

      - name: Scan image
        uses: Azure/container-scan@v0
        with:
          image-name: ${{ matrix.name }}:${{ github.sha }}
          severity-threshold: CRITICAL
          run-quality-checks: true  
